#!/bin/bash

# Copyright (c) 2012, Eric Evans <eevans@sym-link.com>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#   * Neither the name of the <organization> nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

assert_tools()
{
    for tool in lsdiff tg meld; do
        [ -z "`which $tool`" ] && bail "$tool not found"
    done
}

error()
{
    printf "[E]: %d: %s\n" `date +%s` "$1" >&2
}

debug()
{
    [ -n "$DEBUG" ] && printf "[D]: %d: %s\n" `date +%s` "$1" >&2
}

bail()
{
    error "$1"; exit 1
}

patches()
{
    [ -d ".git/refs/top-bases" ] || bail "Not a TopGit-enabled repository"
    # FIXME: should be dependency-based, not lexicographical
    cd .git/refs/top-bases && find -type f | sort | cut -c 3-
}

head()
{
    symref=`git symbolic-ref HEAD 2>/dev/null`
    branch=${symref##refs/heads/}
    echo $branch
}

exists()
{
    git ls-tree -r --name-only "$1" | grep -q "$2" || return 1
    return 0
}

assert_tools
[ -d ".git" ] || bail "Not a Git repository"

[ -z "$1" ] && BRANCH=`head` || BRANCH="$1"
TMPDIR=`mktemp -d tmp.XXXXXX`
DEPENDENCY="refs/top-bases/$BRANCH"

for file in `tg patch "$BRANCH" | lsdiff | cut -c 3-`; do
    mkdir -p $TMPDIR/src/"`dirname $file`"
    mkdir -p $TMPDIR/dst/"`dirname $file`"

    if exists $DEPENDENCY $file; then
    	git show "$DEPENDENCY":$file > $TMPDIR/src/"$file"
    else
        debug "$file not found in branch $DEPENDENCY, creating..."
	touch $TMPDIR/src/"$file"
    fi

    git show "$BRANCH":$file     > $TMPDIR/dst/"$file"
done

meld -L "$BRANCH" --diff $TMPDIR/src $TMPDIR/dst

rm -r $TMPDIR
exit 0
